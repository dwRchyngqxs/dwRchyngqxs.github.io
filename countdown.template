<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta charset="ascii"/>
<script type="text/javascript">
	let speaker_timer = null;
	let question_timer = null;
	let update_timer = null; // updates the timer every second
	let update_start = null;
	let current_audio = new Audio();
	const interrupt_sounds = [
<!-- Insert dynamic content here -->
		];
	current_audio.oncanplaythrough = () => { current_audio.play() }; // Autoplay sound
	current_audio.onended = skip_speaker; // Disable skip button when sound ends

	function setup() {
		// We know we are a popup if there is a # at the end of the URL
		if (document.URL.endsWith("#")) {
			// If the popup is not blocked the opener closes immediately and is null, otherwise notify it
			if (opener !== null) opener.postMessage(null);
			reset();
		} else {
			document.body.innerText
				= "Please allow the popup then you can close this page";
			onmessage = terminate;
			// The default layout should be the biggest one, it is used to size the popup window
			let nw = open("countdown.html#", "_blank",
				`popup,width=${document.body.offsetWidth + 8},height=${document.body.offsetHeight + 8}`);
			if (nw !== null) terminate();
		}
	}
	function terminate() {
		close(); // Fails if JS did not open the tab
		document.body.innerText = "You can close this page";
	}

	function stop_speaker_timer() {
		clearTimeout(speaker_timer);
		speaker_timer = null;
		current_audio.src = null;
	}
	function stop_timers() {
		stop_speaker_timer();
		clearTimeout(question_timer);
		question_timer = null;
		clearInterval(update_timer);
		update_timer = null;
	}
	function random_sound() {
		current_audio.src = interrupt_sounds[Math.floor(Math.random()*interrupt_sounds.length)];
	}

	// Reset does not completely reset the interface
	// This is intentional to allow insepcting the HTML after cancelling the timer
	function reset() {
		stop_timers();
		document.getElementById("start").removeAttribute("hidden");
		document.getElementById("timer").setAttribute("hidden", true);
	}
	function start(speaker, questions) {
		// We cannot delay resetting the interface anymore, we need to use it now
		document.getElementById("start").setAttribute("hidden", true);
		document.getElementById("timer").removeAttribute("hidden");
		document.getElementById("skip").removeAttribute("disabled");
		document.getElementById("time elapsed").innerText = "0:00";
		document.getElementById("time elapsed").style.removeProperty("color");
		speaker_timer = setTimeout(end_speaker, speaker * 1000);
		question_timer = setTimeout(end_update, (speaker + questions) * 1000);
		// setInterval delay is not reliable, the actual delay tend to be slighly above what we want
		// this means the display updates tend to get out of sync.
		// To avoid seconds changing too late (may disturb people looking at the time)
		// we update the display at more 1Hz.
		// A bigger frequency makes the issue less noticeable
		update_start = new Date().getTime();
		update_timer = setInterval(update_elapsed, 99);
	}
	function skip_speaker() {
		stop_speaker_timer();
		document.getElementById("skip").setAttribute("disabled", true);
	}

	function update_elapsed() {
		let time_elapsed = Math.floor((new Date().getTime() - update_start) / 1000);
		document.getElementById("time elapsed").innerText
			= `${Math.floor(time_elapsed/60)}:${(time_elapsed%60).toString().padStart(2, "0")}`;
	}
	function end_speaker() {
		speaker_timer = null;
		random_sound();
	}
	function end_update() {
		question_timer = null;
		random_sound();
		document.getElementById("time elapsed").style.color = "red";
	}
</script>
<title>My first webpage</title>
</head>
<body onload="setup()" style="width: fit-content; margin: 4px;">
<div id="start" hidden>
	<button title="Starts a timer and schedule two interrupt sounds, one at 1:30 min and the other at 3 min" onclick="start(90, 90)">Start short update</button>
	<button title="Starts a timer and schedule two interrupt sounds, one at 8 min and the other at 10 min" onclick="start(480, 120)">Start long update</button>
</div>
<div id="timer">
	<button title="Skip the first sound notifying the end of the speaker allocated time for the update" id="skip" onclick="skip_speaker()">Skip speaker interruption</button>
	<button title="Skip both sounds, stops the timer and resets the interface" onclick="reset()">Cancel timer</button>
	<h1 title="How much time passed since the start of the update" id="time elapsed">0:00</h1>
</div>
</body>
</html>
