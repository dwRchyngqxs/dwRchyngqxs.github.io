<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta charset="ascii"/>
<!-- TODO: add a button to continue a timer in case it was cancelled by mistake -->
<script type="text/javascript">
	let speaker_timer = null;
	let nmq_timer = null; // NO MORE QUESTIONS
	let question_timer = null;
	let update_timer = null; // updates the timer every second
	let update_start = null;
	let current_audio = new Audio();
	const short_interrupts = [
<!-- Insert short sounds here -->
		];
	const long_interrupts = [
<!-- Insert long sounds here -->
		];
	current_audio.oncanplaythrough = () => { current_audio.play() }; // Autoplay sound
	current_audio.onended = () => {
		if (question_timer === null) {
			document.getElementById("cancel").setAttribute("disabled", true);
		}
		document.getElementById("skip").setAttribute("disabled", true);
	};

	function setup() {
		// We know we are a popup if there is a # at the end of the URL
		if (document.URL.endsWith("#")) {
			// If the popup is not blocked the opener closes immediately and is null, otherwise notify it
			if (opener !== null) opener.postMessage(null);
			document.getElementById("message").setAttribute("hidden", true);
		} else {
			document.body.innerText
				= "Please allow the popup then you can close this page";
			onmessage = terminate;
			// The default layout should be the biggest one, it is used to size the popup window
			let nw = open("countdown.html#", "_blank",
				`popup,width=${document.body.offsetWidth + 8},height=${document.body.offsetHeight + 8}`);
			if (nw !== null) terminate();
		}
	}
	function terminate() {
		close(); // Fails if JS did not open the tab
		document.body.innerText = "You can close this page";
	}
	function random_sound(arr) {
		current_audio.src = arr[Math.floor(Math.random()*arr.length)];
	}

	function start(speaker, questions) {
		current_audio.src = null;
		// Reset the interface
		document.getElementById("skip").removeAttribute("disabled");
		document.getElementById("cancel").removeAttribute("disabled");
		let msg = document.getElementById("message");
		msg.setAttribute("hidden", true);
		msg.innerText = "question time";
		let te = document.getElementById("time elapsed");
		te.innerText = "0:00";
		te.style.removeProperty("color");
		// Start timers
		update_start = new Date().getTime();
		clearTimeout(speaker_timer);
		speaker_timer = setTimeout(end_speaker, speaker * 1000);
		clearTimeout(nmq_timer);
		nmq_timer = setTimeout(nmq, (speaker + questions) * 1000 - 10000);
		clearTimeout(question_timer);
		question_timer = setTimeout(end_update, (speaker + questions) * 1000);
		// setInterval delay is not reliable, the actual delay tend to be slighly above what we want
		// this means the display updates tend to get out of sync.
		// To avoid seconds changing too late (may disturb people looking at the time)
		// we update the display at more 1Hz.
		// A bigger frequency makes the issue less noticeable
		clearInterval(update_timer);
		update_timer = setInterval(update_elapsed, 99);
	}
	function skip_speaker() {
		clearTimeout(speaker_timer);
		speaker_timer = null;
		current_audio.src = null;
		document.getElementById("skip").setAttribute("disabled", true);
		document.getElementById("message").removeAttribute("hidden");
	}
	function cancel() {
		skip_speaker();
		clearTimeout(question_timer);
		question_timer = null;
		document.getElementById("cancel").setAttribute("disabled", true);
	}

	function update_elapsed() {
		// Rounds time to 1/10 of a second (period of update) to simulate double the refresh rate
		let time_elapsed = Math.floor((new Date().getTime() - update_start + 50) / 1000);
		document.getElementById("time elapsed").innerText
			= `${Math.floor(time_elapsed/60)}:${(time_elapsed%60).toString().padStart(2, "0")}`;
	}
	function end_speaker() {
		speaker_timer = null;
		random_sound(short_interrupts);
		document.getElementById("message").removeAttribute("hidden");
	}
	function nmq() {
		nmq_timer = null;
		document.getElementById("message").innerText = "no more questions";
	}
	function end_update() {
		question_timer = null;
		random_sound(long_interrupts);
		document.getElementById("time elapsed").style.color = "red";
	}
</script>
<title>My first webpage</title>
</head>
<body onload="setup()" style="width: fit-content; margin: 4px;">
<div>
<button title="Starts a timer and schedule two interrupt sounds, one at 1:30 min and the other at 3 min" onclick="start(90, 90)">Short update</button>
<button title="Starts a timer and schedule two interrupt sounds, one at 8 min and the other at 20 min" onclick="start(480, 720)">Long update</button>
</div>
<div>
<button title="Skip the sound notifying the start of questions and start questions" id="skip" onclick="skip_speaker()"
disabled>Start questions</button>
<button title="Skip all sounds" id="cancel" onclick="cancel()" disabled>Skip sounds</button>
</div>
<div id="message" style="font-size: 20pt;">no more questions</div>
<div title="How much time passed since the start of the update" id="time elapsed" style="font-size: 30pt; font-weight: bold;">0:00</div>
</body>
</html>
